{"ast":null,"code":"import { withInBounds, PointData, getValueXByPoint, getValueYByPoint, sort } from '../../common/utils/helper';\nimport { Rect } from '@syncfusion/ej2-svg-base';\n/**\n * To get the data on mouse move.\n *\n * @private\n */\n\nvar ChartData =\n/** @class */\nfunction () {\n  /**\n   * Constructor for the data.\n   *\n   * @private\n   */\n  function ChartData(chart) {\n    /** @private */\n    this.currentPoints = [];\n    /** @private */\n\n    this.previousPoints = [];\n    this.insideRegion = false;\n    this.commonXvalues = [];\n    this.chart = chart;\n    this.lierIndex = 0;\n  }\n  /**\n   * Method to get the Data.\n   *\n   * @private\n   */\n\n\n  ChartData.prototype.getData = function () {\n    var chart = this.chart;\n    var point = null;\n    var series = null;\n    var width;\n    var height;\n    var mouseX;\n    var mouseY;\n\n    for (var len = chart.visibleSeries.length, i = len - 1; i >= 0; i--) {\n      series = chart.visibleSeries[i];\n      width = series.type === 'Scatter' || series.drawType === 'Scatter' || series.marker.visible ? (series.marker.height + 5) / 2 : 0;\n      height = series.type === 'Scatter' || series.drawType === 'Scatter' || series.marker.visible ? (series.marker.width + 5) / 2 : 0;\n      mouseX = chart.mouseX;\n      mouseY = chart.mouseY;\n\n      if (series.dragSettings.enable && series.isRectSeries) {\n        if (!(series.type === 'Bar' && chart.isTransposed) && (chart.isTransposed || series.type === 'Bar')) {\n          var markerWidth = series.marker.width / 2;\n          mouseX = series.yAxis.isAxisInverse ? mouseX + markerWidth : mouseX - markerWidth;\n        } else {\n          var markerHeight = series.marker.height / 2;\n          mouseY = series.yAxis.isAxisInverse ? mouseY - markerHeight : mouseY + markerHeight;\n        }\n      }\n\n      if (series.visible && withInBounds(mouseX, mouseY, series.clipRect, width, height)) {\n        point = this.getRectPoint(series, series.clipRect, mouseX, mouseY);\n      }\n\n      if (point) {\n        return new PointData(point, series);\n      }\n    }\n\n    return new PointData(point, series);\n  };\n\n  ChartData.prototype.isSelected = function (chart) {\n    return (chart.selectionMode.indexOf('Drag') > -1 || chart.selectionMode.indexOf('Lasso') > -1) && chart.selectionModule && chart.selectionModule.rectPoints !== null;\n  };\n\n  ChartData.prototype.getRectPoint = function (series, rect, x, y) {\n    var chart = this.chart;\n    var fromCenterX;\n    var fromCenterY;\n    var clickAngle;\n    var arcAngle = 0;\n    var startAngle;\n    var endAngle;\n    var distanceFromCenter;\n\n    if (chart.isScrolling) {\n      return null;\n    }\n\n    for (var _i = 0, _a = series.points; _i < _a.length; _i++) {\n      var point = _a[_i];\n\n      if (!point.regionData) {\n        if (!point.regions || !point.regions.length) {\n          continue;\n        }\n      }\n\n      if (point.regionData && this.chart.chartAreaType === 'PolarRadar' && series.drawType.indexOf('Column') > -1) {\n        fromCenterX = x - (series.clipRect.width / 2 + series.clipRect.x);\n        fromCenterY = y - (series.clipRect.height / 2 + series.clipRect.y);\n        arcAngle = 2 * Math.PI * (point.regionData.currentXPosition < 0 ? 1 + point.regionData.currentXPosition : point.regionData.currentXPosition);\n        clickAngle = (Math.atan2(fromCenterY, fromCenterX) + 0.5 * Math.PI - arcAngle) % (2 * Math.PI);\n        clickAngle = clickAngle < 0 ? 2 * Math.PI + clickAngle : clickAngle;\n        clickAngle = clickAngle + 2 * Math.PI * series.chart.primaryXAxis.startAngle;\n        startAngle = point.regionData.startAngle;\n        startAngle -= arcAngle;\n        startAngle = startAngle < 0 ? 2 * Math.PI + startAngle : startAngle;\n        endAngle = point.regionData.endAngle;\n        endAngle -= arcAngle;\n        endAngle = endAngle < 0 ? 2 * Math.PI + endAngle : endAngle;\n        distanceFromCenter = Math.sqrt(Math.pow(Math.abs(fromCenterX), 2) + Math.pow(Math.abs(fromCenterY), 2));\n\n        if (clickAngle >= startAngle && clickAngle <= endAngle && (distanceFromCenter >= point.regionData.innerRadius && distanceFromCenter <= point.regionData.radius || distanceFromCenter <= point.regionData.innerRadius && distanceFromCenter >= point.regionData.radius) && distanceFromCenter <= series.chart.radius) {\n          return point;\n        }\n      }\n\n      if (series.dragSettings.enable && series.isRectSeries || series.isRectSeries && series.marker.visible) {\n        if (this.isPointInThresholdRegion(x, y, point, rect, series)) {\n          this.insideRegion = true;\n          return point;\n        }\n      }\n\n      if (!this.insideRegion && this.checkRegionContainsPoint(point.regions, rect, x, y)) {\n        return point;\n      } else if (this.insideRegion && this.checkRegionContainsPoint(point.regions, rect, x, y)) {\n        return point;\n      }\n    }\n\n    return null;\n  };\n  /**\n   * Checks whether the region contains a point\n   */\n\n\n  ChartData.prototype.checkRegionContainsPoint = function (regionRect, rect, x, y) {\n    var _this = this;\n\n    return regionRect.some(function (region, index) {\n      _this.lierIndex = index;\n      return withInBounds(x, y, new Rect((_this.chart.chartAreaType === 'Cartesian' ? rect.x : 0) + region.x, (_this.chart.chartAreaType === 'Cartesian' ? rect.y : 0) + region.y, region.width, region.height));\n    });\n  };\n  /**\n   * To check the point in threshold region for column and bar series\n   *\n   * @param {number} x X coordinate\n   * @param {number} y Y coodinate\n   * @param {Points} point point\n   * @param {Rect} rect point rect region\n   * @param {Series} series series\n   */\n\n\n  ChartData.prototype.isPointInThresholdRegion = function (x, y, point, rect, series) {\n    var _this = this;\n\n    var isBar = series.type === 'Bar';\n    var isInversed = series.yAxis.isAxisInverse;\n    var isTransposed = series.chart.isTransposed;\n    var heightValue = 10;\n    var yValue = 0;\n    var xValue = 0;\n    var width;\n    var height = width = 2 * heightValue;\n\n    if (isInversed && isTransposed) {\n      if (isBar) {\n        yValue = point.regions[0].height - heightValue;\n        width = point.regions[0].width;\n      } else {\n        xValue = -heightValue;\n        height = point.regions[0].height;\n      }\n    } else if (isInversed || point.yValue < 0) {\n      if (isBar) {\n        xValue = -heightValue;\n        height = point.regions[0].height;\n      } else {\n        yValue = point.regions[0].height - heightValue;\n        width = point.regions[0].width;\n      }\n    } else if (isTransposed) {\n      if (isBar) {\n        yValue = -heightValue;\n        width = point.regions[0].width;\n      } else {\n        xValue = point.regions[0].width - heightValue;\n        height = point.regions[0].height;\n      }\n    } else {\n      if (isBar) {\n        xValue = point.regions[0].width - heightValue;\n        height = point.regions[0].height;\n      } else {\n        yValue = -heightValue;\n        width = point.regions[0].width;\n      }\n    }\n\n    return point.regions.some(function (region) {\n      return withInBounds(x, y, new Rect((_this.chart.chartAreaType === 'Cartesian' ? rect.x : 0) + region.x + xValue, (_this.chart.chartAreaType === 'Cartesian' ? rect.y : 0) + region.y + yValue, width, height));\n    });\n  };\n  /**\n   * @private\n   */\n\n\n  ChartData.prototype.getClosest = function (series, value, xvalues) {\n    var closest;\n    var data;\n    var xData = xvalues ? xvalues : series.xData;\n    var xLength = xData.length;\n\n    if (value >= series.xMin - 0.5 && value <= series.xMax + 0.5) {\n      for (var i = 0; i < xLength; i++) {\n        data = xData[i];\n\n        if (closest == null || Math.abs(data - value) < Math.abs(closest - value)) {\n          closest = data;\n        }\n      }\n    }\n\n    var isDataExist = series.xData.indexOf(closest) !== -1;\n\n    if (isDataExist) {\n      return closest;\n    } else {\n      return null;\n    }\n  };\n\n  ChartData.prototype.binarySearch = function (target, list) {\n    var first = 0;\n    var last = list.length;\n    var position = -1;\n    var found = false;\n    var middle;\n\n    while (found == false && first <= last) {\n      middle = Math.floor((first + last) / 2);\n\n      if (list[middle].xValue == target) {\n        found = true;\n        position = middle;\n      } else if (list[middle].xValue > target) {\n        last = middle - 1;\n      } else {\n        first = middle + 1;\n      }\n    }\n\n    return position !== -1 ? list[position] : null;\n  };\n\n  ChartData.prototype.getClosestX = function (chart, series, xvalues) {\n    var value;\n    var rect = series.clipRect;\n\n    if (!chart.requireInvertedAxis) {\n      value = getValueXByPoint(chart.mouseX - rect.x, rect.width, series.xAxis);\n    } else {\n      value = getValueYByPoint(chart.mouseY - rect.y, rect.height, series.xAxis);\n    }\n\n    var closest = this.getClosest(series, value, xvalues);\n    var point = closest || closest === 0 ? this.binarySearch(closest, sort(series.points, ['xValue'])) : null;\n\n    if (point && point.visible) {\n      return new PointData(point, series);\n    }\n\n    return null;\n  };\n  /**\n   * Merge all visible series X values for shared tooltip (EJ2-47072)\n   *\n   * @param visibleSeries\n   * @private\n   */\n\n\n  ChartData.prototype.mergeXvalues = function (visibleSeries) {\n    if (visibleSeries.length && (!this.commonXvalues.length || this.commonXvalues.length !== visibleSeries[0].xData.length)) {\n      this.commonXvalues = visibleSeries[0].xData;\n\n      for (var index = 1; index < visibleSeries.length; index++) {\n        this.commonXvalues = this.getDistinctValues(this.commonXvalues, visibleSeries[index].xData);\n      }\n    }\n\n    return this.commonXvalues;\n  };\n\n  ChartData.prototype.getDistinctValues = function (first, second) {\n    if (second === void 0) {\n      second = [];\n    }\n\n    var intial = {};\n    var result = [];\n    var index;\n\n    for (index = 0; index < first.length; index++) {\n      var temp = first[index];\n\n      if (!intial[temp]) {\n        intial[temp] = true;\n        result.push(temp);\n      }\n    }\n\n    for (index = 0; index < second.length; index++) {\n      var temp = second[index];\n\n      if (!intial[temp]) {\n        intial[temp] = true;\n        result.push(temp);\n      }\n    }\n\n    return result;\n  };\n\n  return ChartData;\n}();\n\nexport { ChartData };","map":{"version":3,"sources":["/Users/altynbekkuat/Desktop/reactAnalyt/node_modules/@syncfusion/ej2-react-charts/node_modules/@syncfusion/ej2-charts/src/chart/utils/get-data.js"],"names":["withInBounds","PointData","getValueXByPoint","getValueYByPoint","sort","Rect","ChartData","chart","currentPoints","previousPoints","insideRegion","commonXvalues","lierIndex","prototype","getData","point","series","width","height","mouseX","mouseY","len","visibleSeries","length","i","type","drawType","marker","visible","dragSettings","enable","isRectSeries","isTransposed","markerWidth","yAxis","isAxisInverse","markerHeight","clipRect","getRectPoint","isSelected","selectionMode","indexOf","selectionModule","rectPoints","rect","x","y","fromCenterX","fromCenterY","clickAngle","arcAngle","startAngle","endAngle","distanceFromCenter","isScrolling","_i","_a","points","regionData","regions","chartAreaType","Math","PI","currentXPosition","atan2","primaryXAxis","sqrt","pow","abs","innerRadius","radius","isPointInThresholdRegion","checkRegionContainsPoint","regionRect","_this","some","region","index","isBar","isInversed","heightValue","yValue","xValue","getClosest","value","xvalues","closest","data","xData","xLength","xMin","xMax","isDataExist","binarySearch","target","list","first","last","position","found","middle","floor","getClosestX","requireInvertedAxis","xAxis","mergeXvalues","getDistinctValues","second","intial","result","temp","push"],"mappings":"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","sourcesContent":["import { withInBounds, PointData, getValueXByPoint, getValueYByPoint, sort } from '../../common/utils/helper';\nimport { Rect } from '@syncfusion/ej2-svg-base';\n/**\n * To get the data on mouse move.\n *\n * @private\n */\nvar ChartData = /** @class */ (function () {\n    /**\n     * Constructor for the data.\n     *\n     * @private\n     */\n    function ChartData(chart) {\n        /** @private */\n        this.currentPoints = [];\n        /** @private */\n        this.previousPoints = [];\n        this.insideRegion = false;\n        this.commonXvalues = [];\n        this.chart = chart;\n        this.lierIndex = 0;\n    }\n    /**\n     * Method to get the Data.\n     *\n     * @private\n     */\n    ChartData.prototype.getData = function () {\n        var chart = this.chart;\n        var point = null;\n        var series = null;\n        var width;\n        var height;\n        var mouseX;\n        var mouseY;\n        for (var len = chart.visibleSeries.length, i = len - 1; i >= 0; i--) {\n            series = chart.visibleSeries[i];\n            width = (series.type === 'Scatter' || series.drawType === 'Scatter' || (series.marker.visible))\n                ? (series.marker.height + 5) / 2 : 0;\n            height = (series.type === 'Scatter' || series.drawType === 'Scatter' || (series.marker.visible))\n                ? (series.marker.width + 5) / 2 : 0;\n            mouseX = chart.mouseX;\n            mouseY = chart.mouseY;\n            if (series.dragSettings.enable && series.isRectSeries) {\n                if (!(series.type === 'Bar' && chart.isTransposed) && (chart.isTransposed || series.type === 'Bar')) {\n                    var markerWidth = series.marker.width / 2;\n                    mouseX = series.yAxis.isAxisInverse ? mouseX + markerWidth : mouseX - markerWidth;\n                }\n                else {\n                    var markerHeight = series.marker.height / 2;\n                    mouseY = series.yAxis.isAxisInverse ? mouseY - markerHeight : mouseY + markerHeight;\n                }\n            }\n            if (series.visible && withInBounds(mouseX, mouseY, series.clipRect, width, height)) {\n                point = this.getRectPoint(series, series.clipRect, mouseX, mouseY);\n            }\n            if (point) {\n                return new PointData(point, series);\n            }\n        }\n        return new PointData(point, series);\n    };\n    ChartData.prototype.isSelected = function (chart) {\n        return ((chart.selectionMode.indexOf('Drag') > -1 || chart.selectionMode.indexOf('Lasso') > -1) && chart.selectionModule &&\n            chart.selectionModule.rectPoints !== null);\n    };\n    ChartData.prototype.getRectPoint = function (series, rect, x, y) {\n        var chart = this.chart;\n        var fromCenterX;\n        var fromCenterY;\n        var clickAngle;\n        var arcAngle = 0;\n        var startAngle;\n        var endAngle;\n        var distanceFromCenter;\n        if (chart.isScrolling) {\n            return null;\n        }\n        for (var _i = 0, _a = series.points; _i < _a.length; _i++) {\n            var point = _a[_i];\n            if (!point.regionData) {\n                if (!point.regions || !point.regions.length) {\n                    continue;\n                }\n            }\n            if (point.regionData && this.chart.chartAreaType === 'PolarRadar' && series.drawType.indexOf('Column') > -1) {\n                fromCenterX = x - (series.clipRect.width / 2 + series.clipRect.x);\n                fromCenterY = y - (series.clipRect.height / 2 + series.clipRect.y);\n                arcAngle = 2 * Math.PI * (point.regionData.currentXPosition < 0 ? 1 + point.regionData.currentXPosition\n                    : point.regionData.currentXPosition);\n                clickAngle = (Math.atan2(fromCenterY, fromCenterX) + 0.5 * Math.PI - arcAngle) % (2 * Math.PI);\n                clickAngle = clickAngle < 0 ? 2 * Math.PI + clickAngle : clickAngle;\n                clickAngle = clickAngle + 2 * Math.PI * series.chart.primaryXAxis.startAngle;\n                startAngle = point.regionData.startAngle;\n                startAngle -= arcAngle;\n                startAngle = startAngle < 0 ? 2 * Math.PI + startAngle : startAngle;\n                endAngle = point.regionData.endAngle;\n                endAngle -= arcAngle;\n                endAngle = endAngle < 0 ? 2 * Math.PI + endAngle : endAngle;\n                distanceFromCenter = Math.sqrt(Math.pow(Math.abs(fromCenterX), 2) + Math.pow(Math.abs(fromCenterY), 2));\n                if (clickAngle >= startAngle && clickAngle <= endAngle &&\n                    (((distanceFromCenter >= point.regionData.innerRadius && distanceFromCenter <= point.regionData.radius) ||\n                        (distanceFromCenter <= point.regionData.innerRadius && distanceFromCenter >= point.regionData.radius))\n                        && distanceFromCenter <= series.chart.radius)) {\n                    return point;\n                }\n            }\n            if ((series.dragSettings.enable && series.isRectSeries) || (series.isRectSeries && series.marker.visible)) {\n                if (this.isPointInThresholdRegion(x, y, point, rect, series)) {\n                    this.insideRegion = true;\n                    return point;\n                }\n            }\n            if (!this.insideRegion && this.checkRegionContainsPoint(point.regions, rect, x, y)) {\n                return point;\n            }\n            else if (this.insideRegion && this.checkRegionContainsPoint(point.regions, rect, x, y)) {\n                return point;\n            }\n        }\n        return null;\n    };\n    /**\n     * Checks whether the region contains a point\n     */\n    ChartData.prototype.checkRegionContainsPoint = function (regionRect, rect, x, y) {\n        var _this = this;\n        return regionRect.some(function (region, index) {\n            _this.lierIndex = index;\n            return withInBounds(x, y, new Rect((_this.chart.chartAreaType === 'Cartesian' ? rect.x : 0) + region.x, (_this.chart.chartAreaType === 'Cartesian' ? rect.y : 0) + region.y, region.width, region.height));\n        });\n    };\n    /**\n     * To check the point in threshold region for column and bar series\n     *\n     * @param {number} x X coordinate\n     * @param {number} y Y coodinate\n     * @param {Points} point point\n     * @param {Rect} rect point rect region\n     * @param {Series} series series\n     */\n    ChartData.prototype.isPointInThresholdRegion = function (x, y, point, rect, series) {\n        var _this = this;\n        var isBar = series.type === 'Bar';\n        var isInversed = series.yAxis.isAxisInverse;\n        var isTransposed = series.chart.isTransposed;\n        var heightValue = 10;\n        var yValue = 0;\n        var xValue = 0;\n        var width;\n        var height = width = 2 * heightValue;\n        if (isInversed && isTransposed) {\n            if (isBar) {\n                yValue = point.regions[0].height - heightValue;\n                width = point.regions[0].width;\n            }\n            else {\n                xValue = -heightValue;\n                height = point.regions[0].height;\n            }\n        }\n        else if (isInversed || point.yValue < 0) {\n            if (isBar) {\n                xValue = -heightValue;\n                height = point.regions[0].height;\n            }\n            else {\n                yValue = point.regions[0].height - heightValue;\n                width = point.regions[0].width;\n            }\n        }\n        else if (isTransposed) {\n            if (isBar) {\n                yValue = -heightValue;\n                width = point.regions[0].width;\n            }\n            else {\n                xValue = point.regions[0].width - heightValue;\n                height = point.regions[0].height;\n            }\n        }\n        else {\n            if (isBar) {\n                xValue = point.regions[0].width - heightValue;\n                height = point.regions[0].height;\n            }\n            else {\n                yValue = -heightValue;\n                width = point.regions[0].width;\n            }\n        }\n        return point.regions.some(function (region) {\n            return withInBounds(x, y, new Rect((_this.chart.chartAreaType === 'Cartesian' ? rect.x : 0) + region.x + xValue, (_this.chart.chartAreaType === 'Cartesian' ? rect.y : 0) + region.y + yValue, width, height));\n        });\n    };\n    /**\n     * @private\n     */\n    ChartData.prototype.getClosest = function (series, value, xvalues) {\n        var closest;\n        var data;\n        var xData = xvalues ? xvalues : series.xData;\n        var xLength = xData.length;\n        if (value >= series.xMin - 0.5 && value <= series.xMax + 0.5) {\n            for (var i = 0; i < xLength; i++) {\n                data = xData[i];\n                if (closest == null || Math.abs(data - value) < Math.abs(closest - value)) {\n                    closest = data;\n                }\n            }\n        }\n        var isDataExist = series.xData.indexOf(closest) !== -1;\n        if (isDataExist) {\n            return closest;\n        }\n        else {\n            return null;\n        }\n    };\n    ChartData.prototype.binarySearch = function (target, list) {\n        var first = 0;\n        var last = list.length;\n        var position = -1;\n        var found = false;\n        var middle;\n        while (found == false && first <= last) {\n            middle = Math.floor((first + last) / 2);\n            if (list[middle].xValue == target) {\n                found = true;\n                position = middle;\n            }\n            else if (list[middle].xValue > target) {\n                last = middle - 1;\n            }\n            else {\n                first = middle + 1;\n            }\n        }\n        return position !== -1 ? list[position] : null;\n    };\n    ChartData.prototype.getClosestX = function (chart, series, xvalues) {\n        var value;\n        var rect = series.clipRect;\n        if (!chart.requireInvertedAxis) {\n            value = getValueXByPoint(chart.mouseX - rect.x, rect.width, series.xAxis);\n        }\n        else {\n            value = getValueYByPoint(chart.mouseY - rect.y, rect.height, series.xAxis);\n        }\n        var closest = this.getClosest(series, value, xvalues);\n        var point = (closest || closest === 0) ? this.binarySearch(closest, sort(series.points, ['xValue'])) : null;\n        if (point && point.visible) {\n            return new PointData(point, series);\n        }\n        return null;\n    };\n    /**\n     * Merge all visible series X values for shared tooltip (EJ2-47072)\n     *\n     * @param visibleSeries\n     * @private\n     */\n    ChartData.prototype.mergeXvalues = function (visibleSeries) {\n        if (visibleSeries.length && (!this.commonXvalues.length || (this.commonXvalues.length !== visibleSeries[0].xData.length))) {\n            this.commonXvalues = visibleSeries[0].xData;\n            for (var index = 1; index < visibleSeries.length; index++) {\n                this.commonXvalues = this.getDistinctValues(this.commonXvalues, visibleSeries[index].xData);\n            }\n        }\n        return this.commonXvalues;\n    };\n    ChartData.prototype.getDistinctValues = function (first, second) {\n        if (second === void 0) { second = []; }\n        var intial = {};\n        var result = [];\n        var index;\n        for (index = 0; index < first.length; index++) {\n            var temp = first[index];\n            if (!intial[temp]) {\n                intial[temp] = true;\n                result.push(temp);\n            }\n        }\n        for (index = 0; index < second.length; index++) {\n            var temp = second[index];\n            if (!intial[temp]) {\n                intial[temp] = true;\n                result.push(temp);\n            }\n        }\n        return result;\n    };\n    return ChartData;\n}());\nexport { ChartData };\n"]},"metadata":{},"sourceType":"module"}