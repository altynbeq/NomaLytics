{"ast":null,"code":"/**\n * `Selection` module is used to handle RTE Selections.\n */\nimport { NodeSelection } from './../../selection/index';\nimport { NodeCutter } from './nodecutter';\nimport { InsertMethods } from './insert-methods';\nimport { IsFormatted } from './isformatted';\nimport { isIDevice, setEditFrameFocus } from '../../common/util';\nimport { isNullOrUndefined as isNOU, Browser, closest, detach } from '@syncfusion/ej2-base';\nimport { DOMNode } from './dom-node';\n\nvar SelectionCommands =\n/** @class */\nfunction () {\n  function SelectionCommands() {}\n  /**\n   * applyFormat method\n   *\n   * @param {Document} docElement - specifies the document\n   * @param {string} format - specifies the string value\n   * @param {Node} endNode - specifies the end node\n   * @param {string} enterAction - specifies the enter key action\n   * @param {string} value - specifies the string value\n   * @param {string} selector - specifies the string\n   * @returns {void}\n   * @hidden\n    */\n\n\n  SelectionCommands.applyFormat = function (docElement, format, endNode, enterAction, value, selector) {\n    this.enterAction = enterAction;\n    var validFormats = ['bold', 'italic', 'underline', 'strikethrough', 'superscript', 'subscript', 'uppercase', 'lowercase', 'fontcolor', 'fontname', 'fontsize', 'backgroundcolor'];\n\n    if (validFormats.indexOf(format) > -1) {\n      if (format === 'backgroundcolor' && value === '') {\n        value = 'transparent';\n      }\n\n      var domSelection = new NodeSelection();\n      var domNode = new DOMNode(endNode, docElement);\n      var nodeCutter = new NodeCutter();\n      var isFormatted = new IsFormatted();\n      var range = domSelection.getRange(docElement);\n      var save = domSelection.save(range, docElement);\n      var nodes = range.collapsed ? domSelection.getSelectionNodeCollection(range) : domSelection.getSelectionNodeCollectionBr(range);\n      var isCollapsed = false;\n      var isFormat = false;\n      var isCursor = false;\n      var preventRestore = false;\n      var isFontStyle = ['fontcolor', 'fontname', 'fontsize', 'backgroundcolor'].indexOf(format) > -1;\n\n      if (range.collapsed) {\n        if (nodes.length > 0) {\n          isCollapsed = true;\n          range = nodeCutter.GetCursorRange(docElement, range, nodes[0]);\n        } else if (range.startContainer.nodeType === 3 && range.startContainer.parentElement.childElementCount > 0 && range.startOffset > 0 && range.startContainer.parentElement.firstElementChild.tagName.toLowerCase() !== 'br') {\n          isCollapsed = true;\n          range = nodeCutter.GetCursorRange(docElement, range, range.startContainer);\n          nodes.push(range.startContainer);\n        } else {\n          var cursorNode = this.insertCursorNode(docElement, domSelection, range, isFormatted, nodeCutter, format, value, endNode);\n          domSelection.endContainer = domSelection.startContainer = domSelection.getNodeArray(cursorNode, true);\n          var childNodes = cursorNode.nodeName === 'BR' && cursorNode.parentNode.childNodes;\n\n          if (!isNOU(childNodes) && childNodes.length === 1 && childNodes[0].nodeName === 'BR' && nodes.length === 0) {\n            domSelection.setSelectionText(docElement, range.startContainer, range.endContainer, 0, 0);\n            preventRestore = true;\n          } else {\n            domSelection.endOffset = domSelection.startOffset = 1;\n          }\n\n          if (cursorNode.nodeName === 'BR' && cursorNode.parentNode.textContent.length === 0) {\n            preventRestore = true;\n          }\n        }\n      }\n\n      isCursor = range.collapsed;\n      var isSubSup = false;\n\n      for (var index = 0; index < nodes.length; index++) {\n        var formatNode = isFormatted.getFormattedNode(nodes[index], format, endNode);\n\n        if (formatNode === null) {\n          if (format === 'subscript') {\n            formatNode = isFormatted.getFormattedNode(nodes[index], 'superscript', endNode);\n            isSubSup = formatNode === null ? false : true;\n          } else if (format === 'superscript') {\n            formatNode = isFormatted.getFormattedNode(nodes[index], 'subscript', endNode);\n            isSubSup = formatNode === null ? false : true;\n          }\n        }\n\n        if (index === 0 && formatNode === null) {\n          isFormat = true;\n        }\n\n        if (formatNode !== null && (!isFormat || isFontStyle)) {\n          nodes[index] = this.removeFormat(nodes, index, formatNode, isCursor, isFormat, isFontStyle, range, nodeCutter, format, value, domSelection, endNode, domNode);\n        } else {\n          nodes[index] = this.insertFormat(docElement, nodes, index, formatNode, isCursor, isFormat, isFontStyle, range, nodeCutter, format, value);\n        }\n\n        domSelection = this.applySelection(nodes, domSelection, nodeCutter, index, isCollapsed);\n      }\n\n      if (isIDevice()) {\n        setEditFrameFocus(endNode, selector);\n      }\n\n      if (!preventRestore) {\n        save.restore();\n      }\n\n      if (isSubSup) {\n        this.applyFormat(docElement, format, endNode, enterAction);\n      }\n    }\n  };\n\n  SelectionCommands.insertCursorNode = function (docElement, domSelection, range, isFormatted, nodeCutter, format, value, endNode) {\n    var cursorNodes = domSelection.getNodeCollection(range);\n    var cursorFormat = cursorNodes.length > 0 ? cursorNodes.length > 1 && range.startContainer === range.endContainer ? this.getCursorFormat(isFormatted, cursorNodes, format, endNode) : isFormatted.getFormattedNode(cursorNodes[0], format, endNode) : null;\n    var cursorNode = null;\n\n    if (cursorFormat) {\n      cursorNode = cursorNodes[0];\n\n      if (cursorFormat.firstChild.textContent.charCodeAt(0) === 8203) {\n        var isCursorEqual = false;\n        var regEx = new RegExp(String.fromCharCode(8203), 'g');\n        var emptySpaceNode = void 0;\n\n        if (cursorFormat.firstChild === cursorNode) {\n          cursorNode.textContent = cursorNode.textContent.replace(regEx, '');\n          emptySpaceNode = cursorNode;\n          isCursorEqual = true;\n        } else {\n          cursorFormat.firstChild.textContent = cursorFormat.firstChild.textContent.replace(regEx, '');\n          emptySpaceNode = cursorFormat.firstChild;\n        }\n\n        var pointer = void 0;\n\n        if (emptySpaceNode.textContent.length === 0) {\n          if (!isNOU(emptySpaceNode.previousSibling)) {\n            cursorNode = emptySpaceNode.previousSibling;\n            pointer = emptySpaceNode.textContent.length - 1;\n            domSelection.setCursorPoint(docElement, emptySpaceNode, pointer);\n          } else if (!isNOU(emptySpaceNode.parentElement) && emptySpaceNode.parentElement.textContent.length === 0) {\n            var brElem = document.createElement('BR');\n            emptySpaceNode.parentElement.appendChild(brElem);\n            detach(emptySpaceNode);\n            cursorNode = brElem;\n            domSelection.setCursorPoint(docElement, cursorNode.parentElement, 0);\n          }\n        }\n      }\n\n      if (['fontcolor', 'fontname', 'fontsize', 'backgroundcolor'].indexOf(format) > -1) {\n        if (format === 'fontcolor') {\n          cursorFormat.style.color = value;\n        } else if (format === 'fontname') {\n          cursorFormat.style.fontFamily = value;\n        } else if (format === 'fontsize') {\n          cursorFormat.style.fontSize = value;\n        } else {\n          cursorFormat.style.backgroundColor = value;\n        }\n\n        cursorNode = cursorFormat;\n      } else {\n        InsertMethods.unwrap(cursorFormat);\n      }\n    } else {\n      if (cursorNodes.length > 1 && range.startOffset > 0 && cursorNodes[0].firstElementChild && cursorNodes[0].firstElementChild.tagName.toLowerCase() === 'br') {\n        cursorNodes[0].innerHTML = '';\n      }\n\n      if (cursorNodes.length === 1 && range.startOffset === 0 && (cursorNodes[0].nodeName === 'BR' || cursorNodes[0].nextSibling.nodeName === 'BR')) {\n        detach(cursorNodes[0].nodeName === '#text' ? cursorNodes[0].nextSibling : cursorNodes[0]);\n      }\n\n      cursorNode = this.getInsertNode(docElement, range, format, value).firstChild;\n    }\n\n    return cursorNode;\n  };\n\n  SelectionCommands.getCursorFormat = function (isFormatted, cursorNodes, format, endNode) {\n    var currentNode;\n\n    for (var index = 0; index < cursorNodes.length; index++) {\n      currentNode = cursorNodes[index].lastElementChild ? cursorNodes[index].lastElementChild : cursorNodes[index];\n    }\n\n    return isFormatted.getFormattedNode(currentNode, format, endNode);\n  };\n\n  SelectionCommands.removeFormat = function (nodes, index, formatNode, isCursor, isFormat, isFontStyle, range, nodeCutter, format, value, domSelection, endNode, domNode) {\n    var splitNode = null;\n    var startText = range.startContainer.nodeName === '#text' ? range.startContainer.textContent.substring(range.startOffset, range.startContainer.textContent.length) : range.startContainer.textContent;\n\n    if (!(range.startContainer === range.endContainer && range.startOffset === 0 && range.endOffset === range.startContainer.length)) {\n      var nodeIndex = [];\n      var cloneNode = nodes[index];\n\n      do {\n        nodeIndex.push(domSelection.getIndex(cloneNode));\n        cloneNode = cloneNode.parentNode;\n      } while (cloneNode && cloneNode !== formatNode);\n\n      if (nodes[index].nodeName !== 'BR') {\n        cloneNode = splitNode = isCursor && formatNode.textContent.length - 1 === range.startOffset ? nodeCutter.SplitNode(range, formatNode, true) : nodeCutter.GetSpliceNode(range, formatNode);\n      }\n\n      if (!isCursor) {\n        while (cloneNode && cloneNode.childNodes.length > 0 && nodeIndex.length - 1 >= 0 && cloneNode.childNodes.length > nodeIndex[nodeIndex.length - 1]) {\n          cloneNode = cloneNode.childNodes[nodeIndex[nodeIndex.length - 1]];\n          nodeIndex.pop();\n        }\n\n        if (nodes[index].nodeName !== 'BR') {\n          if (cloneNode.nodeType === 3 && !(isCursor && cloneNode.nodeValue === '')) {\n            nodes[index] = cloneNode;\n          } else {\n            var divNode = document.createElement('div');\n            divNode.innerHTML = '&#8203;';\n\n            if (cloneNode.nodeType !== 3) {\n              cloneNode.insertBefore(divNode.firstChild, cloneNode.firstChild);\n              nodes[index] = cloneNode.firstChild;\n            } else {\n              cloneNode.parentNode.insertBefore(divNode.firstChild, cloneNode);\n              nodes[index] = cloneNode.previousSibling;\n              cloneNode.parentNode.removeChild(cloneNode);\n            }\n          }\n        }\n      } else {\n        var lastNode = splitNode;\n\n        for (; lastNode.firstChild !== null && lastNode.firstChild.nodeType !== 3; null) {\n          lastNode = lastNode.firstChild;\n        }\n\n        lastNode.innerHTML = '&#8203;';\n        nodes[index] = lastNode.firstChild;\n      }\n    }\n\n    var fontStyle;\n\n    if (format === 'backgroundcolor') {\n      fontStyle = formatNode.style.fontSize;\n    }\n\n    var bgStyle;\n\n    if (format === 'fontsize') {\n      var bg = closest(nodes[index].parentElement, 'span[style*=' + 'background-color' + ']');\n\n      if (!isNOU(bg)) {\n        bgStyle = bg.style.backgroundColor;\n      }\n    }\n\n    var formatNodeStyles = formatNode.getAttribute('style');\n    var formatNodeTagName = formatNode.tagName;\n    var child = InsertMethods.unwrap(formatNode);\n\n    if (child[0] && !isFontStyle) {\n      var nodeTraverse = child[index] ? child[index] : child[0];\n      var textNode = nodeTraverse;\n\n      for (; nodeTraverse && nodeTraverse.parentElement && nodeTraverse.parentElement !== endNode; // eslint-disable-next-line\n      nodeTraverse = nodeTraverse) {\n        if (nodeTraverse.parentElement && nodeTraverse.parentElement.tagName.toLocaleLowerCase() === formatNode.tagName.toLocaleLowerCase() && (nodeTraverse.parentElement.childElementCount > 1 || range.startOffset > 1)) {\n          if (textNode.parentElement && textNode.parentElement.tagName.toLocaleLowerCase() === formatNode.tagName.toLocaleLowerCase()) {\n            if (range.startOffset === range.endOffset && textNode.nodeType !== 1 && !isNOU(textNode.textContent) && textNode.parentElement.childElementCount > 1) {\n              range.setStart(textNode, 0);\n              range.setEnd(textNode, textNode.textContent.length);\n              nodeCutter.SplitNode(range, textNode.parentElement, false);\n            }\n          }\n\n          if (nodeTraverse.parentElement.tagName.toLocaleLowerCase() === 'span') {\n            if (formatNode.style.textDecoration === 'underline' && nodeTraverse.parentElement.style.textDecoration !== 'underline') {\n              nodeTraverse = nodeTraverse.parentElement;\n              continue;\n            }\n          }\n\n          InsertMethods.unwrap(nodeTraverse.parentElement);\n          nodeTraverse = !isNOU(nodeTraverse.parentElement) && !domNode.isBlockNode(nodeTraverse.parentElement) ? textNode : nodeTraverse.parentElement;\n        } else {\n          nodeTraverse = nodeTraverse.parentElement;\n        }\n      }\n    }\n\n    if (child.length > 0 && isFontStyle) {\n      for (var num = 0; num < child.length; num++) {\n        if (child[num].nodeType !== 3 || child[num].textContent && child[num].textContent.trim().length > 0) {\n          child[num] = InsertMethods.Wrap(child[num], this.GetFormatNode(format, value, formatNodeTagName, formatNodeStyles));\n\n          if (child[num].textContent === startText) {\n            if (num === 0) {\n              range.setStartBefore(child[num]);\n            } else if (num === child.length - 1) {\n              range.setEndAfter(child[num]);\n            }\n          }\n        }\n      }\n\n      var currentNodeElem = nodes[index].parentElement;\n\n      if (!isNOU(fontStyle) && fontStyle !== '') {\n        currentNodeElem.style.fontSize = fontStyle;\n      }\n\n      if (!isNOU(bgStyle) && bgStyle !== '') {\n        currentNodeElem.style.backgroundColor = bgStyle;\n      }\n\n      if (format === 'backgroundcolor' && !isNOU(fontStyle) && fontStyle !== '' && currentNodeElem.parentElement.innerHTML === currentNodeElem.outerHTML) {\n        var curParentElem = currentNodeElem.parentElement;\n        curParentElem.parentElement.insertBefore(currentNodeElem, curParentElem);\n        detach(curParentElem);\n      }\n\n      if (format === 'fontsize' || format === 'fontcolor') {\n        var liElement = nodes[index].parentElement;\n        var parentElement = nodes[index].parentElement;\n\n        while (!isNOU(parentElement) && parentElement.tagName.toLowerCase() !== 'li') {\n          parentElement = parentElement.parentElement;\n          liElement = parentElement;\n        }\n\n        if (!isNOU(liElement) && liElement.tagName.toLowerCase() === 'li' && liElement.textContent.trim() === nodes[index].textContent.trim()) {\n          if (format === 'fontsize') {\n            liElement.style.fontSize = value;\n          } else {\n            liElement.style.color = value;\n            liElement.style.textDecoration = 'inherit';\n          }\n        }\n      }\n    }\n\n    return nodes[index];\n  };\n\n  SelectionCommands.insertFormat = function (docElement, nodes, index, formatNode, isCursor, isFormat, isFontStyle, range, nodeCutter, format, value) {\n    if (!isCursor) {\n      if (formatNode === null && isFormat || isFontStyle) {\n        if (nodes[index].nodeName !== 'BR') {\n          nodes[index] = nodeCutter.GetSpliceNode(range, nodes[index]);\n          nodes[index].textContent = nodeCutter.TrimLineBreak(nodes[index].textContent);\n        }\n\n        if (format === 'uppercase' || format === 'lowercase') {\n          nodes[index].textContent = format === 'uppercase' ? nodes[index].textContent.toLocaleUpperCase() : nodes[index].textContent.toLocaleLowerCase();\n        } else if (!(isFontStyle === true && value === '')) {\n          var element = this.GetFormatNode(format, value);\n\n          if (format === 'fontsize' || format === 'fontcolor') {\n            var liElement = nodes[index].parentElement;\n            var parentElement = nodes[index].parentElement;\n\n            while (!isNOU(parentElement) && parentElement.tagName.toLowerCase() !== 'li') {\n              parentElement = parentElement.parentElement;\n              liElement = parentElement;\n            }\n\n            if (!isNOU(liElement) && liElement.tagName.toLowerCase() === 'li' && liElement.textContent.trim() === nodes[index].textContent.trim()) {\n              if (format === 'fontsize') {\n                liElement.style.fontSize = value;\n              } else {\n                liElement.style.color = value;\n                liElement.style.textDecoration = 'inherit';\n              }\n            }\n\n            nodes[index] = this.applyStyles(nodes, index, element);\n\n            if (format === 'fontsize') {\n              var bg = closest(nodes[index].parentElement, 'span[style*=' + 'background-color' + ']');\n\n              if (!isNOU(bg)) {\n                nodes[index].parentElement.style.backgroundColor = bg.style.backgroundColor;\n              }\n            }\n          } else {\n            nodes[index] = this.applyStyles(nodes, index, element);\n          }\n        }\n      } else {\n        nodes[index] = nodeCutter.GetSpliceNode(range, nodes[index]);\n      }\n    } else {\n      if (format !== 'uppercase' && format !== 'lowercase') {\n        var element = this.getInsertNode(docElement, range, format, value);\n        nodes[index] = element.firstChild;\n        nodeCutter.position = 1;\n      } else {\n        nodeCutter.position = range.startOffset;\n      }\n    }\n\n    return nodes[index];\n  };\n\n  SelectionCommands.applyStyles = function (nodes, index, element) {\n    if (!(nodes[index].nodeName === 'BR' && this.enterAction === 'BR')) {\n      nodes[index] = index === nodes.length - 1 || nodes[index].nodeName === 'BR' ? InsertMethods.Wrap(nodes[index], element) : InsertMethods.WrapBefore(nodes[index], element, true);\n      nodes[index] = this.getChildNode(nodes[index], element);\n    }\n\n    return nodes[index];\n  };\n\n  SelectionCommands.getInsertNode = function (docElement, range, format, value) {\n    var element = this.GetFormatNode(format, value);\n    element.innerHTML = '&#8203;';\n\n    if (Browser.isIE) {\n      var frag = docElement.createDocumentFragment();\n      frag.appendChild(element);\n      range.insertNode(frag);\n    } else {\n      range.insertNode(element);\n    }\n\n    return element;\n  };\n\n  SelectionCommands.getChildNode = function (node, element) {\n    if (node === undefined || node === null) {\n      element.innerHTML = '&#8203;';\n      node = element.firstChild;\n    }\n\n    return node;\n  };\n\n  SelectionCommands.applySelection = function (nodes, domSelection, nodeCutter, index, isCollapsed) {\n    if (nodes.length === 1 && !isCollapsed) {\n      domSelection.startContainer = domSelection.getNodeArray(nodes[index], true);\n      domSelection.endContainer = domSelection.startContainer;\n      domSelection.startOffset = 0;\n      domSelection.endOffset = nodes[index].textContent.length;\n    } else if (nodes.length === 1 && isCollapsed) {\n      domSelection.startContainer = domSelection.getNodeArray(nodes[index], true);\n      domSelection.endContainer = domSelection.startContainer;\n      domSelection.startOffset = nodeCutter.position;\n      domSelection.endOffset = nodeCutter.position;\n    } else if (index === 0) {\n      domSelection.startContainer = domSelection.getNodeArray(nodes[index], true);\n      domSelection.startOffset = 0;\n    } else if (index === nodes.length - 1) {\n      domSelection.endContainer = domSelection.getNodeArray(nodes[index], false);\n      domSelection.endOffset = nodes[index].textContent.length;\n    }\n\n    return domSelection;\n  };\n\n  SelectionCommands.GetFormatNode = function (format, value, tagName, styles) {\n    var node;\n\n    switch (format) {\n      case 'bold':\n        return document.createElement('strong');\n\n      case 'italic':\n        return document.createElement('em');\n\n      case 'underline':\n        node = document.createElement('span');\n        this.updateStyles(node, tagName, styles);\n        node.style.textDecoration = 'underline';\n        return node;\n\n      case 'strikethrough':\n        node = document.createElement('span');\n        this.updateStyles(node, tagName, styles);\n        node.style.textDecoration = 'line-through';\n        return node;\n\n      case 'superscript':\n        return document.createElement('sup');\n\n      case 'subscript':\n        return document.createElement('sub');\n\n      case 'fontcolor':\n        node = document.createElement('span');\n        this.updateStyles(node, tagName, styles);\n        node.style.color = value;\n        node.style.textDecoration = 'inherit';\n        return node;\n\n      case 'fontname':\n        node = document.createElement('span');\n        this.updateStyles(node, tagName, styles);\n        node.style.fontFamily = value;\n        return node;\n\n      case 'fontsize':\n        node = document.createElement('span');\n        this.updateStyles(node, tagName, styles);\n        node.style.fontSize = value;\n        return node;\n\n      default:\n        node = document.createElement('span');\n        this.updateStyles(node, tagName, styles);\n        node.style.backgroundColor = value;\n        return node;\n    }\n  };\n\n  SelectionCommands.updateStyles = function (ele, tag, styles) {\n    if (styles !== null && tag === 'SPAN') {\n      ele.setAttribute('style', styles);\n    }\n  };\n\n  SelectionCommands.enterAction = 'P';\n  return SelectionCommands;\n}();\n\nexport { SelectionCommands };","map":{"version":3,"sources":["/Users/altynbekkuat/Desktop/NomaLytics/node_modules/@syncfusion/ej2-react-richtexteditor/node_modules/@syncfusion/ej2-richtexteditor/src/editor-manager/plugin/selection-commands.js"],"names":["NodeSelection","NodeCutter","InsertMethods","IsFormatted","isIDevice","setEditFrameFocus","isNullOrUndefined","isNOU","Browser","closest","detach","DOMNode","SelectionCommands","applyFormat","docElement","format","endNode","enterAction","value","selector","validFormats","indexOf","domSelection","domNode","nodeCutter","isFormatted","range","getRange","save","nodes","collapsed","getSelectionNodeCollection","getSelectionNodeCollectionBr","isCollapsed","isFormat","isCursor","preventRestore","isFontStyle","length","GetCursorRange","startContainer","nodeType","parentElement","childElementCount","startOffset","firstElementChild","tagName","toLowerCase","push","cursorNode","insertCursorNode","endContainer","getNodeArray","childNodes","nodeName","parentNode","setSelectionText","endOffset","textContent","isSubSup","index","formatNode","getFormattedNode","removeFormat","insertFormat","applySelection","restore","cursorNodes","getNodeCollection","cursorFormat","getCursorFormat","firstChild","charCodeAt","isCursorEqual","regEx","RegExp","String","fromCharCode","emptySpaceNode","replace","pointer","previousSibling","setCursorPoint","brElem","document","createElement","appendChild","style","color","fontFamily","fontSize","backgroundColor","unwrap","innerHTML","nextSibling","getInsertNode","currentNode","lastElementChild","splitNode","startText","substring","nodeIndex","cloneNode","getIndex","SplitNode","GetSpliceNode","pop","nodeValue","divNode","insertBefore","removeChild","lastNode","fontStyle","bgStyle","bg","formatNodeStyles","getAttribute","formatNodeTagName","child","nodeTraverse","textNode","toLocaleLowerCase","setStart","setEnd","textDecoration","isBlockNode","num","trim","Wrap","GetFormatNode","setStartBefore","setEndAfter","currentNodeElem","outerHTML","curParentElem","liElement","TrimLineBreak","toLocaleUpperCase","element","applyStyles","position","WrapBefore","getChildNode","isIE","frag","createDocumentFragment","insertNode","node","undefined","styles","updateStyles","ele","tag","setAttribute"],"mappings":"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","sourcesContent":["/**\n * `Selection` module is used to handle RTE Selections.\n */\nimport { NodeSelection } from './../../selection/index';\nimport { NodeCutter } from './nodecutter';\nimport { InsertMethods } from './insert-methods';\nimport { IsFormatted } from './isformatted';\nimport { isIDevice, setEditFrameFocus } from '../../common/util';\nimport { isNullOrUndefined as isNOU, Browser, closest, detach } from '@syncfusion/ej2-base';\nimport { DOMNode } from './dom-node';\nvar SelectionCommands = /** @class */ (function () {\n    function SelectionCommands() {\n    }\n    /**\n     * applyFormat method\n     *\n     * @param {Document} docElement - specifies the document\n     * @param {string} format - specifies the string value\n     * @param {Node} endNode - specifies the end node\n     * @param {string} enterAction - specifies the enter key action\n     * @param {string} value - specifies the string value\n     * @param {string} selector - specifies the string\n     * @returns {void}\n     * @hidden\n\n     */\n    SelectionCommands.applyFormat = function (docElement, format, endNode, enterAction, value, selector) {\n        this.enterAction = enterAction;\n        var validFormats = ['bold', 'italic', 'underline', 'strikethrough', 'superscript',\n            'subscript', 'uppercase', 'lowercase', 'fontcolor', 'fontname', 'fontsize', 'backgroundcolor'];\n        if (validFormats.indexOf(format) > -1) {\n            if (format === 'backgroundcolor' && value === '') {\n                value = 'transparent';\n            }\n            var domSelection = new NodeSelection();\n            var domNode = new DOMNode(endNode, docElement);\n            var nodeCutter = new NodeCutter();\n            var isFormatted = new IsFormatted();\n            var range = domSelection.getRange(docElement);\n            var save = domSelection.save(range, docElement);\n            var nodes = range.collapsed ? domSelection.getSelectionNodeCollection(range) :\n                domSelection.getSelectionNodeCollectionBr(range);\n            var isCollapsed = false;\n            var isFormat = false;\n            var isCursor = false;\n            var preventRestore = false;\n            var isFontStyle = (['fontcolor', 'fontname', 'fontsize', 'backgroundcolor'].indexOf(format) > -1);\n            if (range.collapsed) {\n                if (nodes.length > 0) {\n                    isCollapsed = true;\n                    range = nodeCutter.GetCursorRange(docElement, range, nodes[0]);\n                }\n                else if (range.startContainer.nodeType === 3 && range.startContainer.parentElement.childElementCount > 0 &&\n                    range.startOffset > 0 && range.startContainer.parentElement.firstElementChild.tagName.toLowerCase() !== 'br') {\n                    isCollapsed = true;\n                    range = nodeCutter.GetCursorRange(docElement, range, range.startContainer);\n                    nodes.push(range.startContainer);\n                }\n                else {\n                    var cursorNode = this.insertCursorNode(docElement, domSelection, range, isFormatted, nodeCutter, format, value, endNode);\n                    domSelection.endContainer = domSelection.startContainer = domSelection.getNodeArray(cursorNode, true);\n                    var childNodes = cursorNode.nodeName === 'BR' && cursorNode.parentNode.childNodes;\n                    if (!isNOU(childNodes) && childNodes.length === 1 && childNodes[0].nodeName === 'BR' && nodes.length === 0) {\n                        domSelection.setSelectionText(docElement, range.startContainer, range.endContainer, 0, 0);\n                        preventRestore = true;\n                    }\n                    else {\n                        domSelection.endOffset = domSelection.startOffset = 1;\n                    }\n                    if (cursorNode.nodeName === 'BR' && cursorNode.parentNode.textContent.length === 0) {\n                        preventRestore = true;\n                    }\n                }\n            }\n            isCursor = range.collapsed;\n            var isSubSup = false;\n            for (var index = 0; index < nodes.length; index++) {\n                var formatNode = isFormatted.getFormattedNode(nodes[index], format, endNode);\n                if (formatNode === null) {\n                    if (format === 'subscript') {\n                        formatNode = isFormatted.getFormattedNode(nodes[index], 'superscript', endNode);\n                        isSubSup = formatNode === null ? false : true;\n                    }\n                    else if (format === 'superscript') {\n                        formatNode = isFormatted.getFormattedNode(nodes[index], 'subscript', endNode);\n                        isSubSup = formatNode === null ? false : true;\n                    }\n                }\n                if (index === 0 && formatNode === null) {\n                    isFormat = true;\n                }\n                if (formatNode !== null && (!isFormat || isFontStyle)) {\n                    nodes[index] = this.removeFormat(nodes, index, formatNode, isCursor, isFormat, isFontStyle, range, nodeCutter, format, value, domSelection, endNode, domNode);\n                }\n                else {\n                    nodes[index] = this.insertFormat(docElement, nodes, index, formatNode, isCursor, isFormat, isFontStyle, range, nodeCutter, format, value);\n                }\n                domSelection = this.applySelection(nodes, domSelection, nodeCutter, index, isCollapsed);\n            }\n            if (isIDevice()) {\n                setEditFrameFocus(endNode, selector);\n            }\n            if (!preventRestore) {\n                save.restore();\n            }\n            if (isSubSup) {\n                this.applyFormat(docElement, format, endNode, enterAction);\n            }\n        }\n    };\n    SelectionCommands.insertCursorNode = function (docElement, domSelection, range, isFormatted, nodeCutter, format, value, endNode) {\n        var cursorNodes = domSelection.getNodeCollection(range);\n        var cursorFormat = (cursorNodes.length > 0) ?\n            (cursorNodes.length > 1 && range.startContainer === range.endContainer) ?\n                this.getCursorFormat(isFormatted, cursorNodes, format, endNode) :\n                isFormatted.getFormattedNode(cursorNodes[0], format, endNode) : null;\n        var cursorNode = null;\n        if (cursorFormat) {\n            cursorNode = cursorNodes[0];\n            if (cursorFormat.firstChild.textContent.charCodeAt(0) === 8203) {\n                var isCursorEqual = false;\n                var regEx = new RegExp(String.fromCharCode(8203), 'g');\n                var emptySpaceNode = void 0;\n                if (cursorFormat.firstChild === cursorNode) {\n                    cursorNode.textContent = cursorNode.textContent.replace(regEx, '');\n                    emptySpaceNode = cursorNode;\n                    isCursorEqual = true;\n                }\n                else {\n                    cursorFormat.firstChild.textContent = cursorFormat.firstChild.textContent.replace(regEx, '');\n                    emptySpaceNode = cursorFormat.firstChild;\n                }\n                var pointer = void 0;\n                if (emptySpaceNode.textContent.length === 0) {\n                    if (!isNOU(emptySpaceNode.previousSibling)) {\n                        cursorNode = emptySpaceNode.previousSibling;\n                        pointer = emptySpaceNode.textContent.length - 1;\n                        domSelection.setCursorPoint(docElement, emptySpaceNode, pointer);\n                    }\n                    else if (!isNOU(emptySpaceNode.parentElement) && emptySpaceNode.parentElement.textContent.length === 0) {\n                        var brElem = document.createElement('BR');\n                        emptySpaceNode.parentElement.appendChild(brElem);\n                        detach(emptySpaceNode);\n                        cursorNode = brElem;\n                        domSelection.setCursorPoint(docElement, cursorNode.parentElement, 0);\n                    }\n                }\n            }\n            if ((['fontcolor', 'fontname', 'fontsize', 'backgroundcolor'].indexOf(format) > -1)) {\n                if (format === 'fontcolor') {\n                    cursorFormat.style.color = value;\n                }\n                else if (format === 'fontname') {\n                    cursorFormat.style.fontFamily = value;\n                }\n                else if (format === 'fontsize') {\n                    cursorFormat.style.fontSize = value;\n                }\n                else {\n                    cursorFormat.style.backgroundColor = value;\n                }\n                cursorNode = cursorFormat;\n            }\n            else {\n                InsertMethods.unwrap(cursorFormat);\n            }\n        }\n        else {\n            if (cursorNodes.length > 1 && range.startOffset > 0 && (cursorNodes[0].firstElementChild &&\n                cursorNodes[0].firstElementChild.tagName.toLowerCase() === 'br')) {\n                cursorNodes[0].innerHTML = '';\n            }\n            if (cursorNodes.length === 1 && range.startOffset === 0 && (cursorNodes[0].nodeName === 'BR' ||\n                cursorNodes[0].nextSibling.nodeName === 'BR')) {\n                detach(cursorNodes[0].nodeName === '#text' ? cursorNodes[0].nextSibling : cursorNodes[0]);\n            }\n            cursorNode = this.getInsertNode(docElement, range, format, value).firstChild;\n        }\n        return cursorNode;\n    };\n    SelectionCommands.getCursorFormat = function (isFormatted, cursorNodes, format, endNode) {\n        var currentNode;\n        for (var index = 0; index < cursorNodes.length; index++) {\n            currentNode = cursorNodes[index].lastElementChild ?\n                cursorNodes[index].lastElementChild : cursorNodes[index];\n        }\n        return isFormatted.getFormattedNode(currentNode, format, endNode);\n    };\n    SelectionCommands.removeFormat = function (nodes, index, formatNode, isCursor, isFormat, isFontStyle, range, nodeCutter, format, value, domSelection, endNode, domNode) {\n        var splitNode = null;\n        var startText = range.startContainer.nodeName === '#text' ?\n            range.startContainer.textContent.substring(range.startOffset, range.startContainer.textContent.length) :\n            range.startContainer.textContent;\n        if (!(range.startContainer === range.endContainer && range.startOffset === 0\n            && range.endOffset === range.startContainer.length)) {\n            var nodeIndex = [];\n            var cloneNode = nodes[index];\n            do {\n                nodeIndex.push(domSelection.getIndex(cloneNode));\n                cloneNode = cloneNode.parentNode;\n            } while (cloneNode && (cloneNode !== formatNode));\n            if (nodes[index].nodeName !== 'BR') {\n                cloneNode = splitNode = (isCursor && (formatNode.textContent.length - 1) === range.startOffset) ?\n                    nodeCutter.SplitNode(range, formatNode, true)\n                    : nodeCutter.GetSpliceNode(range, formatNode);\n            }\n            if (!isCursor) {\n                while (cloneNode && cloneNode.childNodes.length > 0 && ((nodeIndex.length - 1) >= 0)\n                    && (cloneNode.childNodes.length > nodeIndex[nodeIndex.length - 1])) {\n                    cloneNode = cloneNode.childNodes[nodeIndex[nodeIndex.length - 1]];\n                    nodeIndex.pop();\n                }\n                if (nodes[index].nodeName !== 'BR') {\n                    if (cloneNode.nodeType === 3 && !(isCursor && cloneNode.nodeValue === '')) {\n                        nodes[index] = cloneNode;\n                    }\n                    else {\n                        var divNode = document.createElement('div');\n                        divNode.innerHTML = '&#8203;';\n                        if (cloneNode.nodeType !== 3) {\n                            cloneNode.insertBefore(divNode.firstChild, cloneNode.firstChild);\n                            nodes[index] = cloneNode.firstChild;\n                        }\n                        else {\n                            cloneNode.parentNode.insertBefore(divNode.firstChild, cloneNode);\n                            nodes[index] = cloneNode.previousSibling;\n                            cloneNode.parentNode.removeChild(cloneNode);\n                        }\n                    }\n                }\n            }\n            else {\n                var lastNode = splitNode;\n                for (; lastNode.firstChild !== null && lastNode.firstChild.nodeType !== 3; null) {\n                    lastNode = lastNode.firstChild;\n                }\n                lastNode.innerHTML = '&#8203;';\n                nodes[index] = lastNode.firstChild;\n            }\n        }\n        var fontStyle;\n        if (format === 'backgroundcolor') {\n            fontStyle = formatNode.style.fontSize;\n        }\n        var bgStyle;\n        if (format === 'fontsize') {\n            var bg = closest(nodes[index].parentElement, 'span[style*=' + 'background-color' + ']');\n            if (!isNOU(bg)) {\n                bgStyle = bg.style.backgroundColor;\n            }\n        }\n        var formatNodeStyles = formatNode.getAttribute('style');\n        var formatNodeTagName = formatNode.tagName;\n        var child = InsertMethods.unwrap(formatNode);\n        if (child[0] && !isFontStyle) {\n            var nodeTraverse = child[index] ? child[index] : child[0];\n            var textNode = nodeTraverse;\n            for (; nodeTraverse && nodeTraverse.parentElement && nodeTraverse.parentElement !== endNode; \n            // eslint-disable-next-line\n            nodeTraverse = nodeTraverse) {\n                if (nodeTraverse.parentElement && nodeTraverse.parentElement.tagName.toLocaleLowerCase()\n                    === formatNode.tagName.toLocaleLowerCase() &&\n                    (nodeTraverse.parentElement.childElementCount > 1 || range.startOffset > 1)) {\n                    if (textNode.parentElement && textNode.parentElement.tagName.toLocaleLowerCase()\n                        === formatNode.tagName.toLocaleLowerCase()) {\n                        if ((range.startOffset === range.endOffset) && textNode.nodeType !== 1 &&\n                            !isNOU(textNode.textContent) && textNode.parentElement.childElementCount > 1) {\n                            range.setStart(textNode, 0);\n                            range.setEnd(textNode, textNode.textContent.length);\n                            nodeCutter.SplitNode(range, textNode.parentElement, false);\n                        }\n                    }\n                    if (nodeTraverse.parentElement.tagName.toLocaleLowerCase() === 'span') {\n                        if (formatNode.style.textDecoration === 'underline' &&\n                            nodeTraverse.parentElement.style.textDecoration !== 'underline') {\n                            nodeTraverse = nodeTraverse.parentElement;\n                            continue;\n                        }\n                    }\n                    InsertMethods.unwrap(nodeTraverse.parentElement);\n                    nodeTraverse = !isNOU(nodeTraverse.parentElement) && !domNode.isBlockNode(nodeTraverse.parentElement) ? textNode :\n                        nodeTraverse.parentElement;\n                }\n                else {\n                    nodeTraverse = nodeTraverse.parentElement;\n                }\n            }\n        }\n        if (child.length > 0 && isFontStyle) {\n            for (var num = 0; num < child.length; num++) {\n                if (child[num].nodeType !== 3 || (child[num].textContent && child[num].textContent.trim().length > 0)) {\n                    child[num] = InsertMethods.Wrap(child[num], this.GetFormatNode(format, value, formatNodeTagName, formatNodeStyles));\n                    if (child[num].textContent === startText) {\n                        if (num === 0) {\n                            range.setStartBefore(child[num]);\n                        }\n                        else if (num === child.length - 1) {\n                            range.setEndAfter(child[num]);\n                        }\n                    }\n                }\n            }\n            var currentNodeElem = nodes[index].parentElement;\n            if (!isNOU(fontStyle) && fontStyle !== '') {\n                currentNodeElem.style.fontSize = fontStyle;\n            }\n            if (!isNOU(bgStyle) && bgStyle !== '') {\n                currentNodeElem.style.backgroundColor = bgStyle;\n            }\n            if ((format === 'backgroundcolor' && !isNOU(fontStyle) && fontStyle !== '') &&\n                currentNodeElem.parentElement.innerHTML === currentNodeElem.outerHTML) {\n                var curParentElem = currentNodeElem.parentElement;\n                curParentElem.parentElement.insertBefore(currentNodeElem, curParentElem);\n                detach(curParentElem);\n            }\n            if (format === 'fontsize' || format === 'fontcolor') {\n                var liElement = nodes[index].parentElement;\n                var parentElement = nodes[index].parentElement;\n                while (!isNOU(parentElement) && parentElement.tagName.toLowerCase() !== 'li') {\n                    parentElement = parentElement.parentElement;\n                    liElement = parentElement;\n                }\n                if (!isNOU(liElement) && liElement.tagName.toLowerCase() === 'li' &&\n                    liElement.textContent.trim() === nodes[index].textContent.trim()) {\n                    if (format === 'fontsize') {\n                        liElement.style.fontSize = value;\n                    }\n                    else {\n                        liElement.style.color = value;\n                        liElement.style.textDecoration = 'inherit';\n                    }\n                }\n            }\n        }\n        return nodes[index];\n    };\n    SelectionCommands.insertFormat = function (docElement, nodes, index, formatNode, isCursor, isFormat, isFontStyle, range, nodeCutter, format, value) {\n        if (!isCursor) {\n            if ((formatNode === null && isFormat) || isFontStyle) {\n                if (nodes[index].nodeName !== 'BR') {\n                    nodes[index] = nodeCutter.GetSpliceNode(range, nodes[index]);\n                    nodes[index].textContent = nodeCutter.TrimLineBreak(nodes[index].textContent);\n                }\n                if (format === 'uppercase' || format === 'lowercase') {\n                    nodes[index].textContent = (format === 'uppercase') ? nodes[index].textContent.toLocaleUpperCase()\n                        : nodes[index].textContent.toLocaleLowerCase();\n                }\n                else if (!(isFontStyle === true && value === '')) {\n                    var element = this.GetFormatNode(format, value);\n                    if (format === 'fontsize' || format === 'fontcolor') {\n                        var liElement = nodes[index].parentElement;\n                        var parentElement = nodes[index].parentElement;\n                        while (!isNOU(parentElement) && parentElement.tagName.toLowerCase() !== 'li') {\n                            parentElement = parentElement.parentElement;\n                            liElement = parentElement;\n                        }\n                        if (!isNOU(liElement) && liElement.tagName.toLowerCase() === 'li' &&\n                            liElement.textContent.trim() === nodes[index].textContent.trim()) {\n                            if (format === 'fontsize') {\n                                liElement.style.fontSize = value;\n                            }\n                            else {\n                                liElement.style.color = value;\n                                liElement.style.textDecoration = 'inherit';\n                            }\n                        }\n                        nodes[index] = this.applyStyles(nodes, index, element);\n                        if (format === 'fontsize') {\n                            var bg = closest(nodes[index].parentElement, 'span[style*=' + 'background-color' + ']');\n                            if (!isNOU(bg)) {\n                                nodes[index].parentElement.style.backgroundColor = bg.style.backgroundColor;\n                            }\n                        }\n                    }\n                    else {\n                        nodes[index] = this.applyStyles(nodes, index, element);\n                    }\n                }\n            }\n            else {\n                nodes[index] = nodeCutter.GetSpliceNode(range, nodes[index]);\n            }\n        }\n        else {\n            if (format !== 'uppercase' && format !== 'lowercase') {\n                var element = this.getInsertNode(docElement, range, format, value);\n                nodes[index] = element.firstChild;\n                nodeCutter.position = 1;\n            }\n            else {\n                nodeCutter.position = range.startOffset;\n            }\n        }\n        return nodes[index];\n    };\n    SelectionCommands.applyStyles = function (nodes, index, element) {\n        if (!(nodes[index].nodeName === 'BR' && this.enterAction === 'BR')) {\n            nodes[index] = (index === (nodes.length - 1)) || nodes[index].nodeName === 'BR' ?\n                InsertMethods.Wrap(nodes[index], element)\n                : InsertMethods.WrapBefore(nodes[index], element, true);\n            nodes[index] = this.getChildNode(nodes[index], element);\n        }\n        return nodes[index];\n    };\n    SelectionCommands.getInsertNode = function (docElement, range, format, value) {\n        var element = this.GetFormatNode(format, value);\n        element.innerHTML = '&#8203;';\n        if (Browser.isIE) {\n            var frag = docElement.createDocumentFragment();\n            frag.appendChild(element);\n            range.insertNode(frag);\n        }\n        else {\n            range.insertNode(element);\n        }\n        return element;\n    };\n    SelectionCommands.getChildNode = function (node, element) {\n        if (node === undefined || node === null) {\n            element.innerHTML = '&#8203;';\n            node = element.firstChild;\n        }\n        return node;\n    };\n    SelectionCommands.applySelection = function (nodes, domSelection, nodeCutter, index, isCollapsed) {\n        if (nodes.length === 1 && !isCollapsed) {\n            domSelection.startContainer = domSelection.getNodeArray(nodes[index], true);\n            domSelection.endContainer = domSelection.startContainer;\n            domSelection.startOffset = 0;\n            domSelection.endOffset = nodes[index].textContent.length;\n        }\n        else if (nodes.length === 1 && isCollapsed) {\n            domSelection.startContainer = domSelection.getNodeArray(nodes[index], true);\n            domSelection.endContainer = domSelection.startContainer;\n            domSelection.startOffset = nodeCutter.position;\n            domSelection.endOffset = nodeCutter.position;\n        }\n        else if (index === 0) {\n            domSelection.startContainer = domSelection.getNodeArray(nodes[index], true);\n            domSelection.startOffset = 0;\n        }\n        else if (index === nodes.length - 1) {\n            domSelection.endContainer = domSelection.getNodeArray(nodes[index], false);\n            domSelection.endOffset = nodes[index].textContent.length;\n        }\n        return domSelection;\n    };\n    SelectionCommands.GetFormatNode = function (format, value, tagName, styles) {\n        var node;\n        switch (format) {\n            case 'bold':\n                return document.createElement('strong');\n            case 'italic':\n                return document.createElement('em');\n            case 'underline':\n                node = document.createElement('span');\n                this.updateStyles(node, tagName, styles);\n                node.style.textDecoration = 'underline';\n                return node;\n            case 'strikethrough':\n                node = document.createElement('span');\n                this.updateStyles(node, tagName, styles);\n                node.style.textDecoration = 'line-through';\n                return node;\n            case 'superscript':\n                return document.createElement('sup');\n            case 'subscript':\n                return document.createElement('sub');\n            case 'fontcolor':\n                node = document.createElement('span');\n                this.updateStyles(node, tagName, styles);\n                node.style.color = value;\n                node.style.textDecoration = 'inherit';\n                return node;\n            case 'fontname':\n                node = document.createElement('span');\n                this.updateStyles(node, tagName, styles);\n                node.style.fontFamily = value;\n                return node;\n            case 'fontsize':\n                node = document.createElement('span');\n                this.updateStyles(node, tagName, styles);\n                node.style.fontSize = value;\n                return node;\n            default:\n                node = document.createElement('span');\n                this.updateStyles(node, tagName, styles);\n                node.style.backgroundColor = value;\n                return node;\n        }\n    };\n    SelectionCommands.updateStyles = function (ele, tag, styles) {\n        if (styles !== null && tag === 'SPAN') {\n            ele.setAttribute('style', styles);\n        }\n    };\n    SelectionCommands.enterAction = 'P';\n    return SelectionCommands;\n}());\nexport { SelectionCommands };\n"]},"metadata":{},"sourceType":"module"}